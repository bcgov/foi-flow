"""empty message

Revision ID: 29b44e8dc305
Revises: 
Create Date: 2021-07-08 10:08:53.028617

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '29b44e8dc305'
down_revision = 'd185518c3661'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('ALTER TABLE public."NotificationTypes" ADD COLUMN notificationtypelabel VARCHAR(50);')
    op.execute('UPDATE public."NotificationTypes" SET notificationtypelabel = REPLACE(LOWER(name), \' \', \'\');')
    op.execute('ALTER TABLE public."NotificationTypes" ALTER COLUMN notificationtypelabel SET NOT NULL;')
    op.execute('ALTER TABLE public."NotificationTypes" ADD CONSTRAINT unique_notificationtypelabel UNIQUE (notificationtypelabel);')
    
    op.execute('ALTER TABLE public."NotificationUserTypes" ADD COLUMN notificationusertypelabel VARCHAR(50);')
    op.execute('UPDATE public."NotificationUserTypes" SET notificationusertypelabel = REPLACE(LOWER(name), \' \', \'\');')
    op.execute('ALTER TABLE public."NotificationUserTypes" ALTER COLUMN notificationusertypelabel SET NOT NULL;')
    op.execute('ALTER TABLE public."NotificationUserTypes" ADD CONSTRAINT unique_notificationusertypelabel UNIQUE (notificationusertypelabel);')

    op.execute('ALTER TABLE public."FOIRequestNotifications" ADD COLUMN notificationtypelabel VARCHAR(50);')
    op.execute('UPDATE public."FOIRequestNotifications" AS mr SET notificationtypelabel = st.notificationtypelabel FROM public."NotificationTypes" AS st WHERE mr.notificationtypeid = st.notificationtypeid;')
    op.execute('ALTER TABLE public."FOIRequestNotifications" ALTER COLUMN notificationtypelabel SET NOT NULL;')
    op.execute('ALTER TABLE public."FOIRequestNotifications" ALTER COLUMN notificationtypeid DROP NOT NULL;')

    op.execute('ALTER TABLE public."FOIRawRequestNotifications" ADD COLUMN notificationtypelabel VARCHAR(50);')
    op.execute('UPDATE public."FOIRawRequestNotifications" AS mr SET notificationtypelabel = st.notificationtypelabel FROM public."NotificationTypes" AS st WHERE mr.notificationtypeid = st.notificationtypeid;')
    op.execute('ALTER TABLE public."FOIRawRequestNotifications" ALTER COLUMN notificationtypelabel SET NOT NULL;')
    op.execute('ALTER TABLE public."FOIRawRequestNotifications" ALTER COLUMN notificationtypeid DROP NOT NULL;')
    
    op.execute('ALTER TABLE public."FOIRequestNotificationUsers" ADD COLUMN notificationusertypelabel VARCHAR(50);')
    op.execute('UPDATE public."FOIRequestNotificationUsers" AS mr SET notificationusertypelabel = st.notificationusertypelabel FROM public."NotificationUserTypes" AS st WHERE mr.notificationusertypeid = st.notificationusertypeid;')
    op.execute('ALTER TABLE public."FOIRequestNotificationUsers" ALTER COLUMN notificationusertypelabel SET NOT NULL;')
    op.execute('ALTER TABLE public."FOIRequestNotificationUsers" ALTER COLUMN notificationusertypelabel DROP NOT NULL;')
    
    op.execute('ALTER TABLE public."FOIRawRequestNotificationUsers" ADD COLUMN notificationusertypelabel VARCHAR(50);')
    op.execute('UPDATE public."FOIRawRequestNotificationUsers" AS mr SET notificationusertypelabel = st.notificationusertypelabel FROM public."NotificationUserTypes" AS st WHERE mr.notificationusertypeid = st.notificationusertypeid;')
    op.execute('ALTER TABLE public."FOIRawRequestNotificationUsers" ALTER COLUMN notificationusertypelabel SET NOT NULL;')
    op.execute('ALTER TABLE public."FOIRawRequestNotificationUsers" ALTER COLUMN notificationusertypelabel DROP NOT NULL;')

    op.execute('drop view public."v_FOINotifications";')
    op.execute("""
CREATE OR REPLACE VIEW public."v_FOINotifications"
AS select fn.idnumber::text || to_char(fnu.created_at,'YYYYMMDDHH24MMSSMSUS') || fn.axisnumber::text||fnu.userid||fnu.createdby  AS id,
    fn.idnumber,
    fn.axisnumber,
    fn.notification ->> 'message'::text AS notification,
    fn.notificationtypeid,
	fn.notificationtypelabel,
    fnu.userid,
    fnu.createdby,
    fnu.created_at,
        CASE
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NOT NULL THEN ((usr.lastname || ', '::text) || usr.firstname)::character varying
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NULL THEN usr.lastname::character varying
            WHEN usr.lastname IS NULL AND usr.firstname IS NOT NULL THEN usr.firstname::character varying
            ELSE fnu.userid
        END AS userformatted,
        CASE
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NOT NULL THEN ((ctr.lastname || ', '::text) || ctr.firstname)::character varying
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NULL THEN ctr.lastname::character varying
            WHEN ctr.lastname IS NULL AND ctr.firstname IS NOT NULL THEN ctr.firstname::character varying
            ELSE fnu.createdby
        END AS creatorformatted,
    nt.name AS notificationtype,
    to_char(fnu.created_at  at time zone 'utc' at time zone 'pdt', 'YYYY Mon DD | HH12:MI AM') as createdatformatted
   FROM "FOIRequestNotifications" fn
     JOIN "FOIRequestNotificationUsers" fnu ON fn.notificationid = fnu.notificationid
     LEFT JOIN "FOIUsers" usr ON fnu.userid::text = usr.preferred_username
     LEFT JOIN "FOIUsers" ctr ON fnu.createdby::text = ctr.preferred_username
     JOIN "NotificationTypes" nt ON fn.notificationtypeid = nt.notificationtypeid
UNION ALL
 SELECT fn.idnumber::text || to_char(fnu.created_at,'YYYYMMDDHH24MMSSMSUS') || fn.axisnumber::text||fnu.userid||fnu.createdby  AS id,
    fn.idnumber,
    fn.axisnumber,
    fn.notification ->> 'message'::text AS notification,
    fn.notificationtypeid,
	fn.notificationtypelabel ,
    fnu.userid,
    fnu.createdby,
    fnu.created_at,
        CASE
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NOT NULL THEN ((usr.lastname || ', '::text) || usr.firstname)::character varying
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NULL THEN usr.lastname::character varying
            WHEN usr.lastname IS NULL AND usr.firstname IS NOT NULL THEN usr.firstname::character varying
            ELSE fnu.userid
        END AS userformatted,
        CASE
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NOT NULL THEN ((ctr.lastname || ', '::text) || ctr.firstname)::character varying
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NULL THEN ctr.lastname::character varying
            WHEN ctr.lastname IS NULL AND ctr.firstname IS NOT NULL THEN ctr.firstname::character varying
            ELSE fnu.createdby
        END AS creatorformatted,
    nt.name AS notificationtype,
    to_char(fnu.created_at  at time zone 'utc' at time zone 'pdt', 'YYYY Mon DD | HH12:MI AM') as createdatformatted
   FROM "FOIRawRequestNotifications" fn
     JOIN "FOIRawRequestNotificationUsers" fnu ON fn.notificationid = fnu.notificationid
     LEFT JOIN "FOIUsers" usr ON fnu.userid::text = usr.preferred_username
     LEFT JOIN "FOIUsers" ctr ON fnu.createdby::text = ctr.preferred_username
     JOIN "NotificationTypes" nt ON fn.notificationtypeid = nt.notificationtypeid;
""")
    

    # ### end Alembic commands ### 


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('drop view public."v_FOINotifications";')
    op.execute("""
CREATE OR REPLACE VIEW public."v_FOINotifications"
AS select fn.idnumber::text || to_char(fnu.created_at,'YYYYMMDDHH24MMSSMSUS') || fn.axisnumber::text||fnu.userid||fnu.createdby  AS id,
    fn.idnumber,
    fn.axisnumber,
    fn.notification ->> 'message'::text AS notification,
    fn.notificationtypeid,
    fnu.userid,
    fnu.createdby,
    fnu.created_at,
        CASE
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NOT NULL THEN ((usr.lastname || ', '::text) || usr.firstname)::character varying
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NULL THEN usr.lastname::character varying
            WHEN usr.lastname IS NULL AND usr.firstname IS NOT NULL THEN usr.firstname::character varying
            ELSE fnu.userid
        END AS userformatted,
        CASE
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NOT NULL THEN ((ctr.lastname || ', '::text) || ctr.firstname)::character varying
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NULL THEN ctr.lastname::character varying
            WHEN ctr.lastname IS NULL AND ctr.firstname IS NOT NULL THEN ctr.firstname::character varying
            ELSE fnu.createdby
        END AS creatorformatted,
    nt.name AS notificationtype,
    to_char(fnu.created_at  at time zone 'utc' at time zone 'pdt', 'YYYY Mon DD | HH12:MI AM') as createdatformatted
   FROM "FOIRequestNotifications" fn
     JOIN "FOIRequestNotificationUsers" fnu ON fn.notificationid = fnu.notificationid
     LEFT JOIN "FOIUsers" usr ON fnu.userid::text = usr.preferred_username
     LEFT JOIN "FOIUsers" ctr ON fnu.createdby::text = ctr.preferred_username
     JOIN "NotificationTypes" nt ON fn.notificationtypeid = nt.notificationtypeid
UNION ALL
 SELECT fn.idnumber::text || to_char(fnu.created_at,'YYYYMMDDHH24MMSSMSUS') || fn.axisnumber::text||fnu.userid||fnu.createdby  AS id,
    fn.idnumber,
    fn.axisnumber,
    fn.notification ->> 'message'::text AS notification,
    fn.notificationtypeid,
    fnu.userid,
    fnu.createdby,
    fnu.created_at,
        CASE
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NOT NULL THEN ((usr.lastname || ', '::text) || usr.firstname)::character varying
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NULL THEN usr.lastname::character varying
            WHEN usr.lastname IS NULL AND usr.firstname IS NOT NULL THEN usr.firstname::character varying
            ELSE fnu.userid
        END AS userformatted,
        CASE
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NOT NULL THEN ((ctr.lastname || ', '::text) || ctr.firstname)::character varying
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NULL THEN ctr.lastname::character varying
            WHEN ctr.lastname IS NULL AND ctr.firstname IS NOT NULL THEN ctr.firstname::character varying
            ELSE fnu.createdby
        END AS creatorformatted,
    nt.name AS notificationtype,
    to_char(fnu.created_at  at time zone 'utc' at time zone 'pdt', 'YYYY Mon DD | HH12:MI AM') as createdatformatted
   FROM "FOIRawRequestNotifications" fn
     JOIN "FOIRawRequestNotificationUsers" fnu ON fn.notificationid = fnu.notificationid
     LEFT JOIN "FOIUsers" usr ON fnu.userid::text = usr.preferred_username
     LEFT JOIN "FOIUsers" ctr ON fnu.createdby::text = ctr.preferred_username
     JOIN "NotificationTypes" nt ON fn.notificationtypeid = nt.notificationtypeid;
""")
    
    op.execute('ALTER TABLE public."FOIRequestNotifications" drop column notificationtypelabel;')
    op.execute('ALTER TABLE public."FOIRequestNotificationUsers" drop column notificationusertypelabel;')
    op.execute('ALTER TABLE public."FOIRawRequestNotifications" drop column notificationtypelabel;')
    op.execute('ALTER TABLE public."FOIRawRequestNotificationUsers" drop column notificationusertypelabel;')
    op.execute('ALTER TABLE public."NotificationTypes" drop column notificationtypelabel;')
    op.execute('ALTER TABLE public."NotificationUserTypes" drop column notificationusertypelabel;')
    # ### end Alembic commands ###

