"""empty message

Revision ID: d185518c3661
Revises: 7fa7236d06fb
Create Date: 2023-06-01 22:31:24.595281

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd185518c3661'
down_revision = '7fa7236d06fb'

branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('ALTER TABLE public."FOIRequestStatuses" ADD COLUMN statuslabel VARCHAR(50);')
    op.execute('UPDATE public."FOIRequestStatuses" SET statuslabel = REPLACE(LOWER(name), \' \', \'\');')
    op.execute('ALTER TABLE public."FOIRequestStatuses" ALTER COLUMN statuslabel SET NOT NULL;')
    op.execute('ALTER TABLE public."FOIRequestStatuses" ADD CONSTRAINT unique_statuslabel UNIQUE (statuslabel);')

    op.execute('ALTER TABLE public."FOIMinistryRequests" ADD COLUMN requeststatuslabel VARCHAR(50);')
    op.execute('UPDATE public."FOIMinistryRequests" AS mr SET requeststatuslabel = st.statuslabel FROM public."FOIRequestStatuses" AS st WHERE mr.requeststatusid = st.requeststatusid;')
    op.execute('ALTER TABLE public."FOIMinistryRequests" ALTER COLUMN requeststatuslabel SET NOT NULL;')
    op.execute('DROP INDEX "FOIMinistryRequests_event";')
    op.execute('CREATE INDEX "FOIMinistryRequests_event" ON "FOIMinistryRequests"(axisrequestid, assignedto, assignedgroup, assignedministryperson, assignedministrygroup, requeststatusid, requeststatuslabel);')

    op.execute('ALTER TABLE public."FOIRawRequests" ADD COLUMN requeststatuslabel VARCHAR(50);')
    op.execute('UPDATE public."FOIRawRequests" SET requeststatuslabel = REPLACE(LOWER(status), \' \', \'\');')
    op.execute('ALTER TABLE public."FOIRawRequests" ALTER COLUMN requeststatuslabel SET NOT NULL;')
    op.execute('DROP INDEX "FOIRawRequests_event";')
    op.execute('CREATE INDEX "FOIRawRequests_event" ON "FOIRawRequests" (axisrequestid, assignedto, assignedgroup, status, requeststatuslabel);')

    op.execute('ALTER TABLE public."FOIRequestTeams" ADD COLUMN requeststatuslabel VARCHAR(50);')
    op.execute('UPDATE public."FOIRequestTeams" AS rt SET requeststatuslabel = st.statuslabel FROM public."FOIRequestStatuses" AS st WHERE rt.requeststatusid = st.requeststatusid;')
    op.execute('ALTER TABLE public."FOIRequestTeams" ALTER COLUMN requeststatuslabel SET NOT NULL;')


    op.execute("""
CREATE OR REPLACE VIEW public."v_FOIRequests"
AS SELECT DISTINCT ON (fr.foiministryrequestid) fr.foiministryrequestid,
    fr.version,
    fr.axisrequestid,
    fr.foirequest_id,
    NULL::text AS rawrequestid,
    fr.assignedto,
    fr.assignedgroup,
    fr.assignedministryperson,
    fr.assignedministrygroup,
        CASE
            WHEN asg.lastname IS NOT NULL AND asg.firstname IS NOT NULL THEN ((asg.lastname::text || ', '::text) || asg.firstname::text)::character varying
            WHEN asg.lastname IS NOT NULL AND asg.firstname IS NULL THEN asg.lastname
            WHEN asg.lastname IS NULL AND asg.firstname IS NOT NULL THEN asg.firstname
            ELSE coalesce(fr.assignedto, fr.assignedgroup)
        END AS assignedtoformatted,
        CASE
            WHEN msg.lastname IS NOT NULL AND msg.firstname IS NOT NULL THEN ((msg.lastname::text || ', '::text) || msg.firstname::text)::character varying
            WHEN msg.lastname IS NOT NULL AND msg.firstname IS NULL THEN msg.lastname
            WHEN msg.lastname IS NULL AND msg.firstname IS NOT NULL THEN msg.firstname
            ELSE coalesce(fr.assignedministryperson, fr.assignedministrygroup) 
        END AS ministryassignedtoformatted,
    fr.requeststatusid,
    fs2.name AS status,
    fr.description, to_char(fr.created_at,'YYYYMMDDHH24MMSSMSUS') crtid,
    fr.requeststatuslabel AS requeststatuslabel
   FROM "FOIMinistryRequests" fr
     JOIN "FOIRequestStatuses" fs2 ON fr.requeststatusid = fs2.requeststatusid
     LEFT JOIN "FOIAssignees" asg ON fr.assignedto::text = asg.username::text
     LEFT JOIN "FOIAssignees" msg ON fr.assignedministryperson::text = msg.username::text
  ORDER BY fr.foiministryrequestid, fr.version DESC, fr.axisrequestid;
""")
    op.execute("""
CREATE OR REPLACE VIEW public."v_FOIRawRequests"
AS SELECT tmp.requestid::text AS rawrequestid,
    tmp.axisrequestid,
    tmp.foirequest_id,
    tmp.ministryrequestid,
    tmp.assignedto,
    tmp.assignedgroup,
    tmp.assignedministryperson,
    tmp.assignedministrygroup,
    tmp.assignedtoformatted,
    tmp.ministryassignedtoformatted,
    tmp.status,
    tmp.description,
    tmp.isiaorestricted,
    tmp.crtid
   FROM ( SELECT DISTINCT ON (fr.requestid) fr.requestid,
            fr.version,
                CASE
                    WHEN fr.axisrequestid IS NULL THEN ('U-00'::text || fr.requestid)::character varying
                    ELSE fr.axisrequestid
                END AS axisrequestid,
            NULL::integer AS foirequest_id,
            NULL::integer AS ministryrequestid,
            fr.assignedto,
            fr.assignedgroup,
            NULL::text AS assignedministryperson,
            NULL::text AS assignedministrygroup,
                CASE
                    WHEN asg.lastname IS NOT NULL AND asg.firstname IS NOT NULL THEN ((asg.lastname::text || ', '::text) || asg.firstname::text)::character varying
                    WHEN asg.lastname IS NOT NULL AND asg.firstname IS NULL THEN asg.lastname
                    WHEN asg.lastname IS NULL AND asg.firstname IS NOT NULL THEN asg.firstname
                    ELSE coalesce(fr.assignedto, fr.assignedgroup)
                END AS assignedtoformatted,
            NULL::text AS ministryassignedtoformatted,
            fr.status,
                CASE
                    WHEN fr.status::text = 'Unopened'::text THEN (fr.requestrawdata -> 'descriptionTimeframe'::text) ->> 'description'::text
                    ELSE fr.requestrawdata ->> 'description'::text
                END AS description,
            fr.isiaorestricted, to_char(fr.created_at,'YYYYMMDDHH24MMSSMSUS') crtid
           FROM "FOIRawRequests" fr
             LEFT JOIN "FOIAssignees" asg ON fr.assignedto::text = asg.username::text
          WHERE NOT (fr.axisrequestid::text IN ( SELECT "v_FOIRequests".axisrequestid
                   FROM "v_FOIRequests"
                  WHERE "v_FOIRequests".requeststatuslabel = 'closed'))
          ORDER BY fr.requestid, fr.version DESC, fr.axisrequestid) tmp
  WHERE tmp.status::text <> ALL (ARRAY['Archived'::character varying, 'Unopened'::character varying, 'Closed'::character varying]::text[]);
""")
    
    # ### end Alembic commands ### 


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('ALTER TABLE public."FOIRequestStatuses" drop column statuslabel;')
    op.execute('ALTER TABLE public."FOIMinistryRequests" drop column requeststatuslabel;')
    op.execute('ALTER TABLE public."FOIRawRequests" drop column requeststatuslabel;')
    op.execute('ALTER TABLE public."FOIRequestTeams" drop column requeststatuslabel;')

    op.execute('DROP INDEX "FOIMinistryRequests_event";')
    op.execute('CREATE INDEX "FOIMinistryRequests_event" ON "FOIMinistryRequests"(axisrequestid, assignedto, assignedgroup, assignedministryperson, assignedministrygroup, requeststatusid);')

    op.execute('DROP INDEX "FOIRawRequests_event";')
    op.execute('CREATE INDEX "FOIRawRequests_event" ON "FOIRawRequests" (axisrequestid, assignedto, assignedgroup, status);')

    op.execute('DROP VIEW public."v_FOIRawRequests";')
    op.execute('DROP VIEW public."v_FOIRequests";')

    op.execute("""
CREATE OR REPLACE VIEW public."v_FOIRequests"
AS SELECT DISTINCT ON (fr.foiministryrequestid) fr.foiministryrequestid,
    fr.version,
    fr.axisrequestid,
    fr.foirequest_id,
    NULL::text AS rawrequestid,
    fr.assignedto,
    fr.assignedgroup,
    fr.assignedministryperson,
    fr.assignedministrygroup,
        CASE
            WHEN asg.lastname IS NOT NULL AND asg.firstname IS NOT NULL THEN ((asg.lastname::text || ', '::text) || asg.firstname::text)::character varying
            WHEN asg.lastname IS NOT NULL AND asg.firstname IS NULL THEN asg.lastname
            WHEN asg.lastname IS NULL AND asg.firstname IS NOT NULL THEN asg.firstname
            ELSE coalesce(fr.assignedto, fr.assignedgroup)
        END AS assignedtoformatted,
        CASE
            WHEN msg.lastname IS NOT NULL AND msg.firstname IS NOT NULL THEN ((msg.lastname::text || ', '::text) || msg.firstname::text)::character varying
            WHEN msg.lastname IS NOT NULL AND msg.firstname IS NULL THEN msg.lastname
            WHEN msg.lastname IS NULL AND msg.firstname IS NOT NULL THEN msg.firstname
            ELSE coalesce(fr.assignedministryperson, fr.assignedministrygroup) 
        END AS ministryassignedtoformatted,
    fr.requeststatusid,
    fs2.name AS status,
    fr.description, to_char(fr.created_at,'YYYYMMDDHH24MMSSMSUS') crtid
   FROM "FOIMinistryRequests" fr
     JOIN "FOIRequestStatuses" fs2 ON fr.requeststatusid = fs2.requeststatusid
     LEFT JOIN "FOIAssignees" asg ON fr.assignedto::text = asg.username::text
     LEFT JOIN "FOIAssignees" msg ON fr.assignedministryperson::text = msg.username::text
  ORDER BY fr.foiministryrequestid, fr.version DESC, fr.axisrequestid;
""")
    op.execute("""
CREATE OR REPLACE VIEW public."v_FOIRawRequests"
AS SELECT tmp.requestid::text AS rawrequestid,
    tmp.axisrequestid,
    tmp.foirequest_id,
    tmp.ministryrequestid,
    tmp.assignedto,
    tmp.assignedgroup,
    tmp.assignedministryperson,
    tmp.assignedministrygroup,
    tmp.assignedtoformatted,
    tmp.ministryassignedtoformatted,
    tmp.status,
    tmp.description,
    tmp.isiaorestricted,
    tmp.crtid
   FROM ( SELECT DISTINCT ON (fr.requestid) fr.requestid,
            fr.version,
                CASE
                    WHEN fr.axisrequestid IS NULL THEN ('U-00'::text || fr.requestid)::character varying
                    ELSE fr.axisrequestid
                END AS axisrequestid,
            NULL::integer AS foirequest_id,
            NULL::integer AS ministryrequestid,
            fr.assignedto,
            fr.assignedgroup,
            NULL::text AS assignedministryperson,
            NULL::text AS assignedministrygroup,
                CASE
                    WHEN asg.lastname IS NOT NULL AND asg.firstname IS NOT NULL THEN ((asg.lastname::text || ', '::text) || asg.firstname::text)::character varying
                    WHEN asg.lastname IS NOT NULL AND asg.firstname IS NULL THEN asg.lastname
                    WHEN asg.lastname IS NULL AND asg.firstname IS NOT NULL THEN asg.firstname
                    ELSE coalesce(fr.assignedto, fr.assignedgroup)
                END AS assignedtoformatted,
            NULL::text AS ministryassignedtoformatted,
            fr.status,
                CASE
                    WHEN fr.status::text = 'Unopened'::text THEN (fr.requestrawdata -> 'descriptionTimeframe'::text) ->> 'description'::text
                    ELSE fr.requestrawdata ->> 'description'::text
                END AS description,
            fr.isiaorestricted, to_char(fr.created_at,'YYYYMMDDHH24MMSSMSUS') crtid
           FROM "FOIRawRequests" fr
             LEFT JOIN "FOIAssignees" asg ON fr.assignedto::text = asg.username::text
          WHERE NOT (fr.axisrequestid::text IN ( SELECT "v_FOIRequests".axisrequestid
                   FROM "v_FOIRequests"
                  WHERE "v_FOIRequests".requeststatusid = 3))
          ORDER BY fr.requestid, fr.version DESC, fr.axisrequestid) tmp
  WHERE tmp.status::text <> ALL (ARRAY['Archived'::character varying, 'Unopened'::character varying, 'Closed'::character varying]::text[]);
""")
    # ### end Alembic commands ###
