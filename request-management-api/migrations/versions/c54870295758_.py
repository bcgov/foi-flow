"""empty message

Revision ID: c54870295758
Revises: 0b551f4a8cce
Create Date: 2023-06-13 10:27:04.512021

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c54870295758'
down_revision = '0b551f4a8cce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('FOIUsers',
    sa.Column('foiuserid', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.Text, nullable=False),
    sa.Column('preferred_username', sa.Text, nullable=True),
    sa.Column('firstname', sa.Text, nullable=True),
    sa.Column('lastname', sa.Text, nullable=True),    
    sa.Column('email', sa.Text, nullable=True),
    sa.Column('isactive', sa.Boolean, nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('createdby', sa.String(length=120), nullable=True),
    sa.Column('updatedby', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('foiuserid'))

    op.execute("""
CREATE OR REPLACE VIEW public."v_FOIRequests"
AS SELECT DISTINCT ON (fr.foiministryrequestid) fr.foiministryrequestid,
    fr.version,
    fr.axisrequestid,
    fr.foirequest_id,
    NULL::text AS rawrequestid,
    fr.assignedto,
    fr.assignedgroup,
    fr.assignedministryperson,
    fr.assignedministrygroup,
        CASE
            WHEN asg.lastname IS NOT NULL AND asg.firstname IS NOT NULL THEN ((asg.lastname::text || ', '::text) || asg.firstname::text)::character varying
            WHEN asg.lastname IS NOT NULL AND asg.firstname IS NULL THEN asg.lastname
            WHEN asg.lastname IS NULL AND asg.firstname IS NOT NULL THEN asg.firstname
            ELSE coalesce(fr.assignedto, fr.assignedgroup)
        END AS assignedtoformatted,
        CASE
            WHEN msg.lastname IS NOT NULL AND msg.firstname IS NOT NULL THEN ((msg.lastname::text || ', '::text) || msg.firstname::text)::character varying
            WHEN msg.lastname IS NOT NULL AND msg.firstname IS NULL THEN msg.lastname
            WHEN msg.lastname IS NULL AND msg.firstname IS NOT NULL THEN msg.firstname
            ELSE coalesce(fr.assignedministryperson, fr.assignedministrygroup) 
        END AS ministryassignedtoformatted,
    fr.requeststatusid,
    fs2.name AS status,
    fr.description, to_char(fr.created_at,'YYYYMMDDHH24MMSSMSUS') crtid
   FROM "FOIMinistryRequests" fr
     JOIN "FOIRequestStatuses" fs2 ON fr.requeststatusid = fs2.requeststatusid
     LEFT JOIN "FOIAssignees" asg ON fr.assignedto::text = asg.username::text
     LEFT JOIN "FOIAssignees" msg ON fr.assignedministryperson::text = msg.username::text
  ORDER BY fr.foiministryrequestid, fr.version DESC, fr.axisrequestid;
""")
    op.execute("""
CREATE OR REPLACE VIEW public."v_FOIRawRequests"
AS SELECT tmp.requestid::text AS rawrequestid,
    tmp.axisrequestid,
    tmp.foirequest_id,
    tmp.ministryrequestid,
    tmp.assignedto,
    tmp.assignedgroup,
    tmp.assignedministryperson,
    tmp.assignedministrygroup,
    tmp.assignedtoformatted,
    tmp.ministryassignedtoformatted,
    tmp.status,
    tmp.description,
    tmp.isiaorestricted,
    tmp.crtid
   FROM ( SELECT DISTINCT ON (fr.requestid) fr.requestid,
            fr.version,
                CASE
                    WHEN fr.axisrequestid IS NULL THEN ('U-00'::text || fr.requestid)::character varying
                    ELSE fr.axisrequestid
                END AS axisrequestid,
            NULL::integer AS foirequest_id,
            NULL::integer AS ministryrequestid,
            fr.assignedto,
            fr.assignedgroup,
            NULL::text AS assignedministryperson,
            NULL::text AS assignedministrygroup,
                CASE
                    WHEN asg.lastname IS NOT NULL AND asg.firstname IS NOT NULL THEN ((asg.lastname::text || ', '::text) || asg.firstname::text)::character varying
                    WHEN asg.lastname IS NOT NULL AND asg.firstname IS NULL THEN asg.lastname
                    WHEN asg.lastname IS NULL AND asg.firstname IS NOT NULL THEN asg.firstname
                    ELSE coalesce(fr.assignedto, fr.assignedgroup)
                END AS assignedtoformatted,
            NULL::text AS ministryassignedtoformatted,
            fr.status,
                CASE
                    WHEN fr.status::text = 'Unopened'::text THEN (fr.requestrawdata -> 'descriptionTimeframe'::text) ->> 'description'::text
                    ELSE fr.requestrawdata ->> 'description'::text
                END AS description,
            fr.isiaorestricted, to_char(fr.created_at,'YYYYMMDDHH24MMSSMSUS') crtid
           FROM "FOIRawRequests" fr
             LEFT JOIN "FOIAssignees" asg ON fr.assignedto::text = asg.username::text
          WHERE NOT (fr.axisrequestid::text IN ( SELECT "v_FOIRequests".axisrequestid
                   FROM "v_FOIRequests"
                  WHERE "v_FOIRequests".requeststatusid = 3))
          ORDER BY fr.requestid, fr.version DESC, fr.axisrequestid) tmp
  WHERE tmp.status::text <> ALL (ARRAY['Archived'::character varying, 'Unopened'::character varying, 'Closed'::character varying]::text[]);
""")
    op.execute("""
CREATE OR REPLACE VIEW public."v_FOINotifications"
AS select fn.idnumber::text || to_char(fnu.created_at,'YYYYMMDDHH24MMSSMSUS') || fn.axisnumber::text||fnu.userid||fnu.createdby  AS id,
    fn.idnumber,
    fn.axisnumber,
    fn.notification ->> 'message'::text AS notification,
    fn.notificationtypeid,
    fnu.userid,
    fnu.createdby,
    fnu.created_at,
        CASE
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NOT NULL THEN ((usr.lastname || ', '::text) || usr.firstname)::character varying
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NULL THEN usr.lastname::character varying
            WHEN usr.lastname IS NULL AND usr.firstname IS NOT NULL THEN usr.firstname::character varying
            ELSE fnu.userid
        END AS userformatted,
        CASE
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NOT NULL THEN ((ctr.lastname || ', '::text) || ctr.firstname)::character varying
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NULL THEN ctr.lastname::character varying
            WHEN ctr.lastname IS NULL AND ctr.firstname IS NOT NULL THEN ctr.firstname::character varying
            ELSE fnu.createdby
        END AS creatorformatted,
    nt.name AS notificationtype,
    to_char(fnu.created_at  at time zone 'utc' at time zone 'pdt', 'YYYY Mon DD | HH12:MI AM') as createdatformatted
   FROM "FOIRequestNotifications" fn
     JOIN "FOIRequestNotificationUsers" fnu ON fn.notificationid = fnu.notificationid
     LEFT JOIN "FOIUsers" usr ON fnu.userid::text = usr.preferred_username
     LEFT JOIN "FOIUsers" ctr ON fnu.createdby::text = ctr.preferred_username
     JOIN "NotificationTypes" nt ON fn.notificationtypeid = nt.notificationtypeid
UNION ALL
 SELECT fn.idnumber::text || to_char(fnu.created_at,'YYYYMMDDHH24MMSSMSUS') || fn.axisnumber::text||fnu.userid||fnu.createdby  AS id,
    fn.idnumber,
    fn.axisnumber,
    fn.notification ->> 'message'::text AS notification,
    fn.notificationtypeid,
    fnu.userid,
    fnu.createdby,
    fnu.created_at,
        CASE
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NOT NULL THEN ((usr.lastname || ', '::text) || usr.firstname)::character varying
            WHEN usr.lastname IS NOT NULL AND usr.firstname IS NULL THEN usr.lastname::character varying
            WHEN usr.lastname IS NULL AND usr.firstname IS NOT NULL THEN usr.firstname::character varying
            ELSE fnu.userid
        END AS userformatted,
        CASE
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NOT NULL THEN ((ctr.lastname || ', '::text) || ctr.firstname)::character varying
            WHEN ctr.lastname IS NOT NULL AND ctr.firstname IS NULL THEN ctr.lastname::character varying
            WHEN ctr.lastname IS NULL AND ctr.firstname IS NOT NULL THEN ctr.firstname::character varying
            ELSE fnu.createdby
        END AS creatorformatted,
    nt.name AS notificationtype,
    to_char(fnu.created_at  at time zone 'utc' at time zone 'pdt', 'YYYY Mon DD | HH12:MI AM') as createdatformatted
   FROM "FOIRawRequestNotifications" fn
     JOIN "FOIRawRequestNotificationUsers" fnu ON fn.notificationid = fnu.notificationid
     LEFT JOIN "FOIUsers" usr ON fnu.userid::text = usr.preferred_username
     LEFT JOIN "FOIUsers" ctr ON fnu.createdby::text = ctr.preferred_username
     JOIN "NotificationTypes" nt ON fn.notificationtypeid = nt.notificationtypeid;
""")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###    
    op.execute('DROP VIEW public."v_FOIRawRequests"')
    op.execute('DROP VIEW public."v_FOIRequests"')    
    op.execute('DROP VIEW public."v_FOINotifications"')
    op.drop_table('FOIUsers')
    # ### end Alembic commands ###
