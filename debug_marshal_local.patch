diff --git a/forms-flow-web/src/apiManager/endpoints/config.js b/forms-flow-web/src/apiManager/endpoints/config.js
index 3db8dea3..2ce4c997 100644
--- a/forms-flow-web/src/apiManager/endpoints/config.js
+++ b/forms-flow-web/src/apiManager/endpoints/config.js
@@ -1,6 +1,8 @@
 
 export const WEB_BASE_URL = (window._env_ && window._env_.REACT_APP_WEB_BASE_URL) || process.env.REACT_APP_WEB_BASE_URL;
 
-export const FOI_BASE_API_URL = `${(window._env_ && window._env_.REACT_APP_FOI_BASE_API_URL) || process.env.REACT_APP_FOI_BASE_API_URL}`;
+// export const FOI_BASE_API_URL = `${(window._env_ && window._env_.REACT_APP_FOI_BASE_API_URL) || process.env.REACT_APP_FOI_BASE_API_URL}`;
 
-export const AXIS_API_URL = `${(window._env_ && window._env_.REACT_APP_AXIS_API_URL) || process.env.REACT_APP_AXIS_API_URL}`;
\ No newline at end of file
+export const AXIS_API_URL = `${(window._env_ && window._env_.REACT_APP_AXIS_API_URL) || process.env.REACT_APP_AXIS_API_URL}`;
+
+export const FOI_BASE_API_URL = `http://localhost:15000`;
\ No newline at end of file
diff --git a/forms-flow-web/src/components/FOI/FOIAuthenticateRouting.jsx b/forms-flow-web/src/components/FOI/FOIAuthenticateRouting.jsx
index 6b89abed..a79f4d5b 100644
--- a/forms-flow-web/src/components/FOI/FOIAuthenticateRouting.jsx
+++ b/forms-flow-web/src/components/FOI/FOIAuthenticateRouting.jsx
@@ -17,33 +17,33 @@ import UnAuthorized from "./UnAuthorized";
 
 const FOIAuthenticateRouting = React.memo((props) => {
   const dispatch = useDispatch();
-  const isAuth = useSelector((state) => state.user.isAuthenticated); 
+  const isAuth = useSelector((state) => state.user.isAuthenticated);
 
 
-  useEffect(()=>{
-    console.log('authenticate')
-    if(props.store){
-      UserService.initKeycloak(props.store, (_err, res) => {
-        dispatch(setUserAuth(res.authenticated));
-      });
-    }
-  },[props.store, dispatch]);
+  // useEffect(()=>{
+  //   console.log('authenticate')
+  //   if(props.store){
+  //     UserService.initKeycloak(props.store, (_err, res) => {
+  //       dispatch(setUserAuth(res.authenticated));
+  //     });
+  //   }
+  // },[props.store, dispatch]);
   const userDetail = useSelector(state=> state.user.userDetail);
   const isAuthorized = useSelector(state=> state.user.isAuthorized);
   let isMinistry = false;
-  if (Object.entries(userDetail).length !== 0) {
-    const userGroups = userDetail && userDetail.groups.map(group => group.slice(1));
-    isMinistry = isMinistryLogin(userGroups);
-  }
+  // if (Object.entries(userDetail).length !== 0) {
+  //   const userGroups = userDetail && userDetail.groups.map(group => group.slice(1));
+  //   isMinistry = isMinistryLogin(userGroups);
+  // }
 
   return (
       <>
         {isAuth && Object.entries(userDetail).length !== 0 ? (
           isAuthorized ? (
             <>
-              <FOIHeader /> 
+              <FOIHeader />
               <Route exact path="/foi/dashboard">
-                {isMinistry ? 
+                {isMinistry ?
                 <MinistryDashboard userDetail={userDetail} />
                 : <Dashboard userDetail={userDetail} />
                 }
@@ -67,14 +67,14 @@ const FOIAuthenticateRouting = React.memo((props) => {
             </>
           ) : (
             <Route path="/foi">
-              <FOIHeader  unauthorized={true}/> 
+              <FOIHeader  unauthorized={true}/>
               <UnAuthorized />
               <FOIFooter />
             </Route>
           )
         ) : (
           <Loading />
-        )} 
+        )}
       </>
     );
 })
diff --git a/forms-flow-web/src/components/FOI/FOIUnAuthenticateRouting.jsx b/forms-flow-web/src/components/FOI/FOIUnAuthenticateRouting.jsx
index 52a7535c..2ae851a9 100644
--- a/forms-flow-web/src/components/FOI/FOIUnAuthenticateRouting.jsx
+++ b/forms-flow-web/src/components/FOI/FOIUnAuthenticateRouting.jsx
@@ -11,13 +11,14 @@ import FOIFooter from "./Footer";
 import { decrypt } from "../../helper/FOI/helper";
 
 const FOIUnAuthenticateRouting = React.memo((props) => {
-  let isAuth = false;
+  // let isAuth = false;
+  let isAuth = true;
 
-  const authToken = decrypt(localStorage.getItem("authToken")); 
-  
-  if(Object.keys(authToken).length > 0) {
-    isAuth = true;
-  }
+  // const authToken = decrypt(localStorage.getItem("authToken"));
+
+  // if(Object.keys(authToken).length > 0) {
+  //   isAuth = true;
+  // }
 
   const dispatch = useDispatch();
 
@@ -32,7 +33,7 @@ const FOIUnAuthenticateRouting = React.memo((props) => {
   return (
       <>
             <Route exact path="/">
-                <FOIHeader /> 
+                <FOIHeader />
                 <Home />
                 <FOIFooter />
             </Route>
diff --git a/forms-flow-web/src/modules/userDetailReducer.js b/forms-flow-web/src/modules/userDetailReducer.js
index be9cb015..deeee4ca 100644
--- a/forms-flow-web/src/modules/userDetailReducer.js
+++ b/forms-flow-web/src/modules/userDetailReducer.js
@@ -4,10 +4,13 @@ import { encrypt } from "../helper/FOI/helper";
 const initialState = {
   bearerToken: '',
   roles: '',
-  userDetail:{},
-  isAuthenticated:false,
+  // userDetail:{},
+  // isAuthenticated:false,
+  userDetail:{preferred_username:"RICHAQI@idir",family_name:"Q",given_name:"Rich",groups:["/Intake Team"]},
+  isAuthenticated:true,
   currentPage:'',
-  isAuthorized:false,
+  // isAuthorized:false,
+  isAuthorized:true,
 }
 
 
diff --git a/request-management-api/request_api/auth.py b/request-management-api/request_api/auth.py
index 2585ac3b..bfe8e505 100644
--- a/request-management-api/request_api/auth.py
+++ b/request-management-api/request_api/auth.py
@@ -32,11 +32,11 @@ class Auth:
     def require(cls, f):
         """Validate the Bearer Token."""
 
-        @jwt.requires_auth
+        # @jwt.requires_auth
         @wraps(f)
         def decorated(*args, **kwargs):
-            g.authorization_header = request.headers.get("Authorization", None)
-            g.token_info = g.jwt_oidc_token_info
+            # g.authorization_header = request.headers.get("Authorization", None)
+            # g.token_info = g.jwt_oidc_token_info
             return f(*args, **kwargs)
 
         return decorated
@@ -46,11 +46,11 @@ class Auth:
     @classmethod
     def belongstosameministry(cls,func):
         @wraps(func)
-        def decorated(type, id, field,*args, **kwargs):           
+        def decorated(type, id, field,*args, **kwargs):
             usertype = AuthHelper.getusertype()
             if(usertype == "iao"):
                 return func(type, id, field,*args, **kwargs)
-            elif(usertype == "ministry"):    
+            elif(usertype == "ministry"):
                 requestministry = FOIMinistryRequest.getrequestbyministryrequestid(id)
                 ministrygroups = AuthHelper.getministrygroups()
                 expectedministrygroup = MinistryTeamWithKeycloackGroup[requestministry['programarea.bcgovcode']].value
@@ -58,17 +58,17 @@ class Auth:
                 if(expectedministrygroup not in ministrygroups):
                     return retval
                 else:
-                    return func(type, id, field,*args, **kwargs)            
-        return decorated           
-           
+                    return func(type, id, field,*args, **kwargs)
+        return decorated
+
     @classmethod
     def documentbelongstosameministry(cls,func):
         @wraps(func)
-        def decorated( ministryrequestid, *args, **kwargs):           
+        def decorated( ministryrequestid, *args, **kwargs):
             usertype = AuthHelper.getusertype()
             if(usertype == "iao"):
                 return func( ministryrequestid,*args, **kwargs)
-            elif(usertype == "ministry"):    
+            elif(usertype == "ministry"):
                 requestministry = FOIMinistryRequest.getrequestbyministryrequestid(ministryrequestid)
                 ministrygroups = AuthHelper.getministrygroups()
                 expectedministrygroup = MinistryTeamWithKeycloackGroup[requestministry['programarea.bcgovcode']].value
@@ -76,10 +76,10 @@ class Auth:
                 if(expectedministrygroup not in ministrygroups):
                     return retval
                 else:
-                    return func(id, *args, **kwargs)            
-        return decorated 
-             
-    
+                    return func(id, *args, **kwargs)
+        return decorated
+
+
     @classmethod
     def ismemberofgroups(cls, groups):
         """Check that at least one of the realm groups are in the token.
@@ -92,110 +92,115 @@ class Auth:
             #@Auth.require
             @wraps(f)
             def wrapper(*args, **kwargs):
-                _groups = groups.split(',')
-                token = jwt.get_token_auth_header()
-                unverified_claims = josejwt.get_unverified_claims(token)
-                usergroups = unverified_claims['groups']
-                usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
-                exists = False
-                for group in _groups:
-                    if group in usergroups: 
-                       exists = True
-                retval = "Unauthorized" , 401
-                if exists == True:            
-                    return f(*args, **kwargs)
-                return retval
+                # _groups = groups.split(',')
+                # token = jwt.get_token_auth_header()
+                # unverified_claims = josejwt.get_unverified_claims(token)
+                # usergroups = unverified_claims['groups']
+                # usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
+                # exists = False
+                # for group in _groups:
+                #     if group in usergroups:
+                #        exists = True
+                # retval = "Unauthorized" , 401
+                # if exists == True:
+                #     return f(*args, **kwargs)
+                # return retval
+                return f(*args, **kwargs)
 
             return wrapper
 
         return decorated
-    
+
 auth = (
     Auth()
 )
 
 
 class AuthHelper:
-    
+
     @classmethod
     def getuserid(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        return unverified_claims['preferred_username']
-    
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # return unverified_claims['preferred_username']
+        return 'RICHAQI@idir'
+
     @classmethod
     def getwsuserid(cls, token):
         unverified_claims = josejwt.get_unverified_claims(token.strip())
-        return unverified_claims['preferred_username']  
+        return unverified_claims['preferred_username']
 
     @classmethod
     def getusername(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        return unverified_claims['name']  
-    
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # return unverified_claims['name']
+        return 'Richard Qi'
+
     @classmethod
     def isministrymember(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())) 
-        if len(ministrygroups) > 0:
-            return True
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # if len(ministrygroups) > 0:
+        #     return True
         return False
-    
+
     @classmethod
     def isprocesingteammember(cls):
-        usergroups = cls.getusergroups()
-        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())) 
-        if len(ministrygroups) > 0:
-            return False    
-        else:
-            processinggroups = list(set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list())) 
-            if len(processinggroups) > 0:
-                return True
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # if len(ministrygroups) > 0:
+        #     return False
+        # else:
+        #     processinggroups = list(set(usergroups).intersection(ProcessingTeamWithKeycloackGroup.list()))
+        #     if len(processinggroups) > 0:
+        #         return True
         return False
-    
-    @classmethod        
+
+    @classmethod
     def getusergroups(cls):
-        token = request.headers.get("Authorization", None)
-        unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
-        usergroups = unverified_claims['groups']
-        usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
-        return usergroups
-    
-    @classmethod        
-    def getusertype(cls): 
-        usergroups = cls.getusergroups()
-        ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list())) 
-        if len(ministrygroups) > 0:
-            return "ministry"    
-        else:
-            iaogroups = list(set(usergroups).intersection(IAOTeamWithKeycloackGroup.list()))
-            if len(iaogroups) > 0:
-                return "iao"
-        return None
-    
-    @classmethod        
-    def getiaotype(cls): 
-        usergroups = cls.getusergroups()
-        _groups = set(usergroups)
-        if cls.isministrymember() == False:
-            processinggroups = list(_groups.intersection(ProcessingTeamWithKeycloackGroup.list())) 
-            if len(processinggroups) > 0:
-                return "processing"
-            else:
-                if 'Flex Team' in _groups:
-                    return "flex"
-                elif 'Intake Team' in _groups:
-                    return "intake"
-                else:
-                    return None
-        else:
-            return None
-    
-    @classmethod        
-    def getministrygroups(cls): 
-        usergroups = cls.getusergroups()
-        return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))   
-      
-
-        
\ No newline at end of file
+        # token = request.headers.get("Authorization", None)
+        # unverified_claims = josejwt.get_unverified_claims(token.partition("Bearer")[2].strip())
+        # usergroups = unverified_claims['groups']
+        # usergroups = [usergroup.replace('/','',1) if usergroup.startswith('/') else usergroup for usergroup in usergroups]
+        # return usergroups
+        return ['Flex Team', 'Intake Team']
+        # return ['EDU Ministry Team']
+
+    @classmethod
+    def getusertype(cls):
+        # usergroups = cls.getusergroups()
+        # ministrygroups = list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        # if len(ministrygroups) > 0:
+        #     return "ministry"
+        # else:
+        #     iaogroups = list(set(usergroups).intersection(IAOTeamWithKeycloackGroup.list()))
+        #     if len(iaogroups) > 0:
+        #         return "iao"
+        # return None
+        return "iao"
+
+    @classmethod
+    def getiaotype(cls):
+        # usergroups = cls.getusergroups()
+        # _groups = set(usergroups)
+        # if cls.isministrymember() == False:
+        #     processinggroups = list(_groups.intersection(ProcessingTeamWithKeycloackGroup.list()))
+        #     if len(processinggroups) > 0:
+        #         return "processing"
+        #     else:
+        #         if 'Flex Team' in _groups:
+        #             return "flex"
+        #         elif 'Intake Team' in _groups:
+        #             return "intake"
+        #         else:
+        #             return None
+        # else:
+        #     return None
+        return "intake"
+
+    @classmethod
+    def getministrygroups(cls):
+        # usergroups = cls.getusergroups()
+        # return list(set(usergroups).intersection(MinistryTeamWithKeycloackGroup.list()))
+        return ['EDU Ministry Team']
\ No newline at end of file
