name: Request Management API CI


on:
  pull_request:
    branches:
      - main
    paths:
      - "request-management-api/**"
  # Remove entire push section when done testing
  push:
    branches: 
      - dev-AC-109

defaults:
  run:
    shell: bash
    working-directory: ./request-management-api

jobs:
  # setup-job:
  #   runs-on: ubuntu-20.04

  #   if: github.repository == 'bcgov/foi-flow'

  #   steps:
  #     - uses: actions/checkout@v2
  #     - run: "true"

  docker-build-check:
    runs-on: ubuntu-20.04
    name: Build dockerfile to ensure it works

    steps:
      - uses: actions/checkout@v2
      - name: docker build to check strictness
        id: docker-build
        run: |
          docker build -f dockerfile.local .

  python-build-check:
    runs-on: ubuntu-20.04
    name: Build python to ensure it works

    strategy:
      matrix:
        # python-version: [3.6, 3.7, 3.8, 3.9]
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  pytest:
    runs-on: ubuntu-20.04
    needs: python-build-check
    name: Run pytest

    strategy:
      matrix:
        # python-version: [3.6, 3.7, 3.8, 3.9]
        python-version: [3.9]


    # # Service containers to run with `container-job`
    # services:
    #   # Label used to access the service container
    #   postgres:
    #     # Docker Hub image
    #     image: postgres
    #     # Provide the password for postgres
    #     env:
    #       POSTGRES_PASSWORD: postgres
    #     # Set health checks to wait until postgres has started
    #     options: >-
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5

    steps:
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        working-directory: ./request-management-api/tests
        run: |
          pytest
     

# Abin, how do we run unit tests? What command?
# "pytest"
# merge in dev-AA-20
# setÂ FLASK_ENV to "development"
